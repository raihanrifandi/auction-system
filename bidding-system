#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <string>
#include <fstream>
#include <algorithm>
#include <memory>
using namespace std;

// Tugas Proyek Akhir Responsi
// Mata Kuliah Pemograman Terstruktur

// Function declarations
void displayHeader(const string& filename);

// Classes
class Bidder {
    private:
        int id;
        string username;
        string password;
        float balance;
        float autoBidLimit;

    public:
        Bidder(int id, const string& username, const string& password, float balance, float limit)
            : id(id), username(username), password(password), balance(balance), autoBidLimit(limit) {}

        int getId() const {
            return id;
        }

        bool login(const string& user, const string& pass) {
            return username == user && password == pass;
        }

        void setBalance(float new_balance) {
            balance = new_balance;
        }

        float getBalance() const {
            return balance;
        }

        float getAutoBidLimit() const {
            return autoBidLimit;
        }
};

class Admin {
    public:
        struct Item {
            int id;
            string name;
            float startingPrice;

            Item(int id, const string& name, float startingPrice)
                : id(id), name(name), startingPrice(startingPrice) {}
        };

        vector<Bidder> bidders;

    private:
        string username;
        string password;
        queue<Item> items;

    public:
        Admin(const string& username, const string& password)
            : username(username), password(password) {}
        
        queue<Admin::Item>& getItems() {
        return items;
        }

        bool login(const string& user, const string& pass) {
            return username == user && password == pass;
        }

        void addItem(int id, const string& name, float startingPrice) {
            Item newItem(id, name, startingPrice);
            items.push(newItem);
        }

        void createBidderAccount(int id, const string& user, const string& pass, float balance, float limit) {
            Bidder newBidder(id, user, pass, balance, limit);
            bidders.push_back(newBidder);
        }

        void setBidderBalance(int bidder_id, float new_balance) {
            for (Bidder& bidder : bidders) {
                if (bidder.getId() == bidder_id) {
                    bidder.setBalance(new_balance);
                    break;
                }
            }
        }

        // Queue implementation
        Item getNextItem() {
            Item nextItem = items.front();
            items.pop();
            return nextItem;
        }
   
};

class Auction {
    private:
        Admin& admin;
        stack<float> bids;
        int highestBidderId;
        bool auctionActive;

    public:
        Auction(Admin& admin) : admin(admin), highestBidderId(-1), auctionActive(false){}

        void startAuction() {
            auctionActive = true;
            cout << "Auction started." << endl;
        }

        void stopAuction() {
            auctionActive = false;
            cout << "Auction ended." << endl;
        }

        bool isAuctionActive() const {
            return auctionActive;
        }

        void showCurrentItem();

        void placeBid(int bidder_id, float bid_amount) {
            if (!auctionActive) {
                cout << "Auction is not active. Please wait for the admin to start the auction." << endl;
                return;
            }
                    
            Bidder* bidderPtr = nullptr;

            // Find the bidder using a pointer
            for (Bidder& bidder : admin.bidders) {
                if (bidder.getId() == bidder_id) {
                    bidderPtr = &bidder;
                    break;
                }
            }

            if (bidderPtr != nullptr) {
                if (bidderPtr->getBalance() >= bid_amount) {
                    if (bid_amount > highestBid()) {
                        bids.push(bid_amount);
                        highestBidderId = bidder_id;
                        cout << "Bid placed successfully by bidder " << bidder_id << " for $" << bid_amount << endl;

                        // Deduct the bid amount from the bidder's balance
                         // problem line 137

                   
                    } else {
                        cout << "Your bid must be higher than the current highest bid" << endl;
                    }
                } else {
                    cout << "Insufficient balance. Your current balance is $" << bidderPtr->getBalance() << endl;
                }
            } else {
                cout << "Bidder not found" << endl;
            }
    }

        float highestBid() {
            float highest = 0.0f;
            stack<float> tempStack;

            while (!bids.empty()) {
                float currentBid = bids.top();
                bids.pop();
                tempStack.push(currentBid);

                if (currentBid > highest) {
                    highest = currentBid;
                }
            }

            // Restore the original stack
            while (!tempStack.empty()) {
                bids.push(tempStack.top());
                tempStack.pop();
            }

            return highest;
        }

        void showHighestBid() {
            if (!bids.empty()) {
                cout << "The highest bid is $" << highestBid() << " from bidder " << highestBidderId << endl;
            } else {
                cout << "No bids have been placed yet" << endl;
            }
        }

        void endAuctionAndUpdateWinner();
};

void Auction::showCurrentItem() {
    queue<Admin::Item>& items = admin.getItems();
    if (!items.empty()) {
        Admin::Item nextItem = items.front();
        cout << "Current item: " << nextItem.name << " (ID: " << nextItem.id << ", starting price: $" << nextItem.startingPrice << ")" << endl;
    } else {
        cout << "No more items available" << endl;
    }
}

void Auction::endAuctionAndUpdateWinner() {
    if (isAuctionActive()) {
        stopAuction();

        if (highestBidderId != -1) {
            Bidder* winner = nullptr;
            for (Bidder& bidder : admin.bidders) {
                if (bidder.getId() == highestBidderId) {
                    winner = &bidder;
                    break;
                }
            }

            if (winner != nullptr) {
                float winningBid = highestBid();
                winner->setBalance(winner->getBalance() - winningBid);
                cout << "Bidder " << highestBidderId << " won the auction with a bid of $" << winningBid << endl;
            }
        } else {
            cout << "No bids were placed during the auction" << endl;
        }
    } else {
        cout << "Auction is not active. Please start the auction first" << endl;
    }
}

// Function definitions
void displayHeader(const string& filename) {
    ifstream myfile(filename);
    string line;

    if (myfile.is_open()) {
        while (getline(myfile, line)) {
            cout << line << endl;
        }
        myfile.close();
    } else {
        cout << "Banner is not displayed" << endl;
    }
}

int main() {
    Admin admin("admin", "admin123");
    Auction auction(admin);
    char choice;

    do {
        string filename = "header.txt";
        displayHeader(filename);

        cout << "============================== Auction House Menu ================================" << endl;
        cout << "\t\t\t1. Bidder Login\n";
        cout << "\t\t\t2. Admin Login\n";
        cout << "\t\t\t0. Exit\n";
        cout << "\t\t\tEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case '1': {
                // Bidder Login
                system("cls");
                string username, password;
                cout << "Bidder Login\n";
                cout << "Username: ";
                cin >> username;
                cout << "Password: ";
                cin >> password;

                Bidder* currentBidder = nullptr;

                // Find the bidder using a pointer
                for (Bidder& bidder : admin.bidders) {
                    if (bidder.login(username, password)) {
                        currentBidder = &bidder;
                        break;
                    }
                }

                if (currentBidder != nullptr) {
                    char bidderChoice;
                    do {
                        system("cls");
                        cout << "Bidder Menu\n";
                        cout << "1. Show current Item\n";
                        cout << "2. Place Bid\n";
                        cout << "3. Show Highest Bid\n";
                        cout << "0. Logout\n";
                        cout << "Enter your choice: ";
                        cin >> bidderChoice;

                        switch (bidderChoice) {
                            case '1':
                                auction.showCurrentItem();
                                break;
                            case '2': {
                                float bidAmount;
                                cout << "Enter bid amount: $";
                                cin >> bidAmount;
                                auction.placeBid(currentBidder->getId(), bidAmount);
                                break;
                            }
                            case '3':
                                auction.showHighestBid();
                                break;
                            case '0':
                                cout << "Logout successful" << endl;
                                break;
                            default:
                                cout << "Invalid choice" << endl;
                                break;
                        }

                        cout << "Press Enter to continue...";
                        cin.ignore();
                        cin.get();
                    } while (bidderChoice != '0');
                } else {
                    cout << "Invalid username or password" << endl;
                }
                break;
            }
            case '2': {
                // Admin Login
                system("cls");
                string username, password;
                cout << "Admin Login\n";
                cout << "Username: ";
                cin >> username;
                cout << "Password: ";
                cin >> password;

                if (admin.login(username, password)) {
                    char adminChoice;
                    do {
                        system("cls");
                        cout << "Admin Menu\n";
                        cout << "1. Add Item\n";
                        cout << "2. Create Bidder Account\n";
                        cout << "3. Set Bidder Balance\n";
                        cout << "4. Start auction\n";
                        cout << "5. Stop auction\n";
                        cout << "0. Logout\n";
                        cout << "Enter your choice: ";
                        cin >> adminChoice;

                        switch (adminChoice) {
                            case '1': {
                                int itemId;
                                string itemName;
                                float startingPrice;
                                cout << "Enter item ID: ";
                                cin >> itemId;
                                cout << "Enter item name: ";
                                cin.ignore();
                                getline(cin, itemName);
                                cout << "Enter starting price: $";
                                cin >> startingPrice;
                                admin.addItem(itemId, itemName, startingPrice);
                                cout << "Item added successfully" << endl;
                                break;
                            }
                            case '2': {
                                int bidderId;
                                string bidderUsername, bidderPassword;
                                float balance, autoBidLimit;
                                cout << "Enter bidder ID: ";
                                cin >> bidderId;
                                cout << "Enter bidder username: ";
                                cin >> bidderUsername;
                                cout << "Enter bidder password: ";
                                cin >> bidderPassword;
                                cout << "Enter bidder balance: $";
                                cin >> balance;
                                cout << "Enter bidder auto-bid limit: $";
                                cin >> autoBidLimit;
                                admin.createBidderAccount(bidderId, bidderUsername, bidderPassword, balance, autoBidLimit);
                                cout << "Bidder account created successfully" << endl;
                                break;
                            }
                            case '3': {
                                int bidderId;
                                float newBalance;
                                cout << "Enter bidder ID: ";
                                cin >> bidderId;
                                cout << "Enter new balance: $";
                                cin >> newBalance;
                                admin.setBidderBalance(bidderId, newBalance);
                                cout << "Bidder balance updated successfully" << endl;
                                break;
                            }
                            case '4':{
                                auction.startAuction();
                                break;
                            }
                            case '5':{
                                auction.endAuctionAndUpdateWinner();
                                break;
                            }
                            case '0':
                                cout << "Logout successful" << endl;
                                break;
                            default:
                                cout << "Invalid choice" << endl;
                                break;
                        }

                        cout << "Press Enter to continue...";
                        cin.ignore();
                        cin.get();
                    } while (adminChoice != '0');
                } else {
                    cout << "Invalid username or password" << endl;
                }
                break;
            }
            case '0':
                cout << "Thank you for using the Auction House program. Goodbye!" << endl;
                break;
            default:
                cout << "Invalid choice" << endl;
                break;
        }

        cout << "Press Enter to continue...";
        cin.ignore();
        cin.get();
        system("cls");
    } while (choice != '0');

    return 0;
}
